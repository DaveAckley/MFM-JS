!function(t){var e={};function o(r){if(e[r])return e[r].exports;var s=e[r]={i:r,l:!1,exports:{}};return t[r].call(s.exports,s,s.exports,o),s.l=!0,s.exports}o.m=t,o.c=e,o.d=function(t,e,r){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)o.d(r,s,function(e){return t[e]}.bind(null,s));return r},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=0)}([function(t,e,o){"use strict";o.r(e);class r{constructor(t,e){this.tile=t,this.makeWindow(t,e)}makeWindow(t,e){this.window=new Map,this.origin=this.tile.getSiteByCoord(e),this.window.set(this.origin.id,this.origin),r.WINDOW_ORDER_OFFSETS.map(t=>this.OffsetFromOrigin(e,t.row,t.col)).forEach(e=>{let o=t.getSiteByCoord(e);o&&this.window.set(o.id,o)})}OffsetFromOrigin(t,e,o){return{row:t.row+e,col:t.col+o}}getRandom(t){return this.getSiteFromCandidates(Array.from(this.window.values()),!0,t)}getNearest(t){return this.getSiteFromCandidates(Array.from(this.window.values()),!1,t)}getEast(){return this.getDirection(r.EW_EAST)}getWest(){return this.getDirection(r.EW_WEST)}getNorth(){return this.getDirection(r.EW_NORTH)}getSouth(){return this.getDirection(r.EW_SOUTH)}getNorthWest(){return this.getDirection(r.EW_NORTHWEST)}getSouthWest(){return this.getDirection(r.EW_SOUTHWEST)}getNorthEast(){return this.getDirection(r.EW_NORTHEAST)}getSouthEast(){return this.getDirection(r.EW_SOUTHEAST)}getAdjacent4Way(t=!0,e){return this.getSiteFromCandidates([this.getWest(),this.getNorth(),this.getSouth(),this.getEast()],t,e)}getAdjacent8Way(t=!0,e){return this.getSiteFromCandidates([this.getWest(),this.getNorth(),this.getSouth(),this.getEast(),this.getNorthWest(),this.getSouthWest(),this.getNorthEast(),this.getSouthEast()],t,e)}getSiteFromCandidates(t,e=!0,o){if(!((t=t.filter(t=>!!t&&(o?!(!o||t.atom.type!==o)&&t:t))).length<1))return e?t[Math.floor(Math.random()*t.length)]:t[0]}getDirection(t){let e=this.tile.sites.get(s.CtoID(this.OffsetFromOrigin(this.origin.tilePos,t.row,t.col)));if(e)return e}}r.WINDOW_ORDER_OFFSETS=[{col:0,row:0},{col:-1,row:0},{col:0,row:-1},{col:0,row:1},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1},{col:-2,row:0},{col:0,row:-1},{col:0,row:2},{col:2,row:0},{col:-2,row:-1},{col:-2,row:1},{col:-1,row:-2},{col:-1,row:2},{col:1,row:-2},{col:1,row:2},{col:2,row:-1},{col:2,row:1},{col:-3,row:0},{col:0,row:-3},{col:0,row:3},{col:3,row:0},{col:-2,row:-2},{col:-2,row:2},{col:2,row:-2},{col:2,row:2},{col:-3,row:-1},{col:-3,row:1},{col:-1,row:-3},{col:-1,row:3},{col:1,row:-3},{col:1,row:3},{col:3,row:-1},{col:3,row:1},{col:-4,row:0},{col:0,row:-4},{col:0,row:4},{col:4,row:0}],r.EW_WEST={col:-1,row:0},r.EW_EAST={col:1,row:0},r.EW_NORTH={col:0,row:-1},r.EW_SOUTH={col:0,row:1},r.EW_NORTHWEST={col:-1,row:-1},r.EW_SOUTHWEST={col:-1,row:1},r.EW_NORTHEAST={col:1,row:-1},r.EW_SOUTHEAST={col:1,row:1};class s{static CtoID(t){return`${t.row}:${t.col}`}static IDtoC(t){let e=t.split(":");return{row:parseInt(e[0]),col:parseInt(e[1])}}static GenerateEventWindow(t,e,o){let s=Math.floor(Math.random()*e),i=Math.floor(Math.random()*o);return new r(t,{row:i,col:s})}}class i{constructor(t,e,o=!0,r=!0,s=0){this.name=t,this.type=e,this.data=s,this.moveable=o,this.killable=r}set data(t){this._data=t}get data(){return this._data}set name(t){this._name=t}get name(){return this._name}set type(t){this._type=t}get type(){return this._type}set moveable(t){this._moveable=t}get moveable(){return this._moveable}set killable(t){this._killable=t}get killable(){return this._killable}exec(t){}}class n extends i{constructor(){super(a.DREG.name,a.DREG.type),this.pTOTAL_CHANCE=100,this.pDREG_CREATE=.1,this.pRES_CREATE=.5,this.pDREG_DESTROY=10,this.pANY_DESTROY=1}exec(t){const e=t.getAdjacent4Way();if(e.atom.type===a.EMPTY){const o=Math.random()*this.pTOTAL_CHANCE<this.pDREG_CREATE,r=Math.random()*this.pTOTAL_CHANCE<this.pRES_CREATE;o?(e.atom=new l(a.DREG),console.log("DREG CREATED")):r&&(e.atom=new l(a.RES),console.log("RES CREATED")),t.origin.swapAtoms(e)}else if(e.atom.type===a.DREG){Math.random()*this.pTOTAL_CHANCE<this.pDREG_DESTROY&&(e.atom=new l(a.EMPTY),console.log("DREG DESTROYED"),t.origin.swapAtoms(e))}else{Math.random()*this.pTOTAL_CHANCE<this.pANY_DESTROY&&(console.log(e.atom.type.name+" DESTROYED"),e.atom=new l(a.EMPTY),t.origin.swapAtoms(e))}super.exec(t)}}class a{static registerType(t,e,o){this.TYPES_ARRAY.push({name:t,type:e,class:o})}}a.EMPTY={name:"EMPTY",type:"E",class:class extends i{constructor(){super(a.EMPTY.name,a.EMPTY.type)}exec(t){super.exec(t)}}},a.DREG={name:"DREG",type:"D",class:n},a.RES={name:"RES",type:"R",class:class extends i{constructor(){super(a.RES.name,a.RES.type)}exec(t){t.origin.swapAtoms(t.getRandom(a.EMPTY)),super.exec(t)}}},a.TYPES_ARRAY=[a.EMPTY,a.DREG,a.RES];class l{constructor(t=a.EMPTY){this.type=t,this.elem=new this.type.class}exec(t){this.elem.exec(t)}}class c{constructor(t){this.tilePos=t,this.id=s.CtoID(this.tilePos),this.create()}swapAtoms(t){t&&([this.atom,t.atom]=[t.atom,this.atom])}create(){this.atom=new l}}let h=new class{constructor(t=1,e=1){this.width=t,this.height=e,this.create()}getSiteByCoord(t){return this.sites.get(s.CtoID(t))}getRandomSite(){let t=Math.floor(Math.random()*this.height),e=Math.floor(Math.random()*this.width);return this.sites.get(`${t}:${e}`)}create(){this.sites=new Map;for(let t=0;t<this.width;t++)for(let e=0;e<this.height;e++)this.sites.set(`${e}:${t}`,new c({row:e,col:t}))}}(30,30);console.log(h),console.log(h.getRandomSite()),h.getRandomSite().atom.elem=new n,h.getRandomSite().atom.elem=new n,h.getRandomSite().atom.elem=new n,h.getRandomSite().atom.elem=new n;new p5(t=>{t.preload=(()=>{}),t.setup=(()=>{t.createCanvas(600,600)});t.draw=(()=>{t.background(100),((t,e)=>{t.push(),t.translate(50,50),e.sites.forEach(e=>{switch(e.atom.elem.type){case a.EMPTY.type:t.fill(32);break;case a.DREG.type:t.fill(255,32,32);break;case a.RES.type:t.fill(32,255,64)}t.stroke(0),t.ellipse(12*e.tilePos.col,12*e.tilePos.row,12,12)}),t.pop()})(t,h),(()=>{for(var t=0;t<2500;t++){let t=s.GenerateEventWindow(h,h.width,h.height);t.origin.atom.exec(t)}})()})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,