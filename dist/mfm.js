!function(t){var e={};function o(r){if(e[r])return e[r].exports;var s=e[r]={i:r,l:!1,exports:{}};return t[r].call(s.exports,s,s.exports,o),s.l=!0,s.exports}o.m=t,o.c=e,o.d=function(t,e,r){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)o.d(r,s,function(e){return t[e]}.bind(null,s));return r},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=0)}([function(t,e,o){"use strict";o.r(e);class r{constructor(t,e,o=100,r=100){this.name=t,this.type=e,this.moveability=o,this.killability=r}exec(t){}}class s{constructor(t=i.EMPTY){this.type=t,this.elem=new this.type.class}exec(t){this.elem.exec(t)}}class i{static registerType(t,e,o){this.TYPES_ARRAY.push({name:t,type:e,class:o})}}i.EMPTY={name:"EMPTY",type:"E",class:class extends r{constructor(){super(i.EMPTY.name,i.EMPTY.type)}exec(t){super.exec(t)}}},i.DREG={name:"DREG",type:"D",class:class extends r{constructor(){super(i.DREG.name,i.DREG.type),this.pTOTAL_CHANCE=100,this.pDREG_CREATE=.1,this.pRES_CREATE=.5,this.pDREG_DESTROY=10,this.pANY_DESTROY=1}exec(t){const e=t.getAdjacent4Way();if(e.atom.type===i.EMPTY){const o=Math.random()*this.pTOTAL_CHANCE<this.pDREG_CREATE,r=Math.random()*this.pTOTAL_CHANCE<this.pRES_CREATE;o?(t.origin.moveAtom(e,new s(i.DREG)),console.log("DREG CREATED")):r?(t.origin.moveAtom(e,new s(i.RES)),console.log("RES CREATED")):t.origin.swapAtoms(e)}else e.atom.type===i.DREG?Math.random()*this.pTOTAL_CHANCE<this.pDREG_DESTROY&&(console.log("DREG DESTROYED"),t.origin.moveAtom(e)):Math.random()*this.pTOTAL_CHANCE<this.pANY_DESTROY&&(console.log(e.atom.type.name+" DESTROYED"),t.origin.moveAtom(e));super.exec(t)}}},i.RES={name:"RES",type:"R",class:class extends r{constructor(){super(i.RES.name,i.RES.type)}exec(t){t.origin.swapAtoms(t.getRandom(i.EMPTY)),super.exec(t)}}},i.WALL={name:"WALL",type:"W",class:class extends r{constructor(){super(i.WALL.name,i.WALL.type,0,0)}exec(t){super.exec(t)}}},i.MASON={name:"MASON",type:"Ma",class:class extends r{constructor(t="EEEENNNNWWWWSSSS"){super(i.MASON.name,i.MASON.type,100,10),this.path=[],t=this.boxPath(),this.path=t.toUpperCase().split("")}randomPath(){let t="";const e=Math.floor(8*Math.random())+6,o=["E","N","S","W"];for(var r=0;r<e;r++){const e=Math.floor(Math.random()*o.length),r=Math.floor(3*Math.random())+3,i=o[e];for(var s=0;s<r;s++)t=t.concat(i)}return t}boxPath(){let t="";const e=["E","N","W","S"];for(;e.length;){const r=5,s=e.shift();for(var o=0;o<r;o++)t=t.concat(s)}return t}exec(t){if(this.path.length){let e;switch(this.path.shift()){case"E":e=t.getEast();break;case"N":e=t.getNorth();break;case"S":e=t.getSouth();break;case"W":e=t.getWest()}!e||e.atom.type!==i.RES&&e.atom.type!==i.EMPTY?e&&(e.atom.type,i.WALL):t.origin.moveAtom(e,new s(i.WALL))}else t.origin.killSelf(new s(i.WALL));super.exec(t)}}},i.TYPES_ARRAY=[i.EMPTY,i.DREG,i.RES,i.WALL,i.MASON];class a{constructor(t,e){this.tile=t,this.makeWindow(t,e)}makeWindow(t,e){if(this.window=new Map,this.origin=this.tile.getSiteByCoord(e),this.origin.atom.type===i.EMPTY)return;this.window.set(this.origin.id,this.origin),a.WINDOW_ORDER_OFFSETS.map(t=>this.OffsetFromOrigin(e,t.row,t.col)).forEach(e=>{let o=t.getSiteByCoord(e);o&&this.window.set(o.id,o)})}OffsetFromOrigin(t,e,o){return{row:t.row+e,col:t.col+o}}getRandom(t){return this.getSiteFromCandidates(Array.from(this.window.values()),!0,t)}getNearest(t){return this.getSiteFromCandidates(Array.from(this.window.values()),!1,t)}getEast(){return this.getDirection(a.EW_EAST)}getWest(){return this.getDirection(a.EW_WEST)}getNorth(){return this.getDirection(a.EW_NORTH)}getSouth(){return this.getDirection(a.EW_SOUTH)}getNorthWest(){return this.getDirection(a.EW_NORTHWEST)}getSouthWest(){return this.getDirection(a.EW_SOUTHWEST)}getNorthEast(){return this.getDirection(a.EW_NORTHEAST)}getSouthEast(){return this.getDirection(a.EW_SOUTHEAST)}getAdjacent4Way(t=!0,e){return this.getSiteFromCandidates([this.getWest(),this.getNorth(),this.getSouth(),this.getEast()],t,e)}getAdjacent8Way(t=!0,e){return this.getSiteFromCandidates([this.getWest(),this.getNorth(),this.getSouth(),this.getEast(),this.getNorthWest(),this.getSouthWest(),this.getNorthEast(),this.getSouthEast()],t,e)}getSiteFromCandidates(t,e=!0,o){if(!((t=t.filter(t=>!!t&&(o?!(!o||t.atom.type!==o)&&t:t))).length<1))return e?t[Math.floor(Math.random()*t.length)]:t[0]}getDirection(t){let e=this.tile.sites.get(n.CtoID(this.OffsetFromOrigin(this.origin.tilePos,t.row,t.col)));if(e)return e}}a.WINDOW_ORDER_OFFSETS=[{col:0,row:0},{col:-1,row:0},{col:0,row:-1},{col:0,row:1},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1},{col:-2,row:0},{col:0,row:-1},{col:0,row:2},{col:2,row:0},{col:-2,row:-1},{col:-2,row:1},{col:-1,row:-2},{col:-1,row:2},{col:1,row:-2},{col:1,row:2},{col:2,row:-1},{col:2,row:1},{col:-3,row:0},{col:0,row:-3},{col:0,row:3},{col:3,row:0},{col:-2,row:-2},{col:-2,row:2},{col:2,row:-2},{col:2,row:2},{col:-3,row:-1},{col:-3,row:1},{col:-1,row:-3},{col:-1,row:3},{col:1,row:-3},{col:1,row:3},{col:3,row:-1},{col:3,row:1},{col:-4,row:0},{col:0,row:-4},{col:0,row:4},{col:4,row:0}],a.EW_WEST={col:-1,row:0},a.EW_EAST={col:1,row:0},a.EW_NORTH={col:0,row:-1},a.EW_SOUTH={col:0,row:1},a.EW_NORTHWEST={col:-1,row:-1},a.EW_SOUTHWEST={col:-1,row:1},a.EW_NORTHEAST={col:1,row:-1},a.EW_SOUTHEAST={col:1,row:1};class n{static CtoID(t){return`${t.row}:${t.col}`}static IDtoC(t){let e=t.split(":");return{row:parseInt(e[0]),col:parseInt(e[1])}}static GenerateEventWindow(t,e,o){let r=Math.floor(Math.random()*e),s=Math.floor(Math.random()*o);return new a(t,{row:s,col:r})}}class l{constructor(t){this.tilePos=t,this.id=n.CtoID(this.tilePos),this.create()}killAtom(t){100*Math.random()<t.atom.elem.killability&&(t.atom=new s(i.EMPTY))}killSelf(t=new s(i.EMPTY)){this.atom=t}moveAtom(t,e=new s(i.EMPTY)){if(t){100*Math.random()<t.atom.elem.killability&&([this.atom,t.atom]=[e,this.atom])}}swapAtoms(t){if(t){100*Math.random()<t.atom.elem.moveability&&([this.atom,t.atom]=[t.atom,this.atom])}}create(){this.atom=new s}}let c=new class{constructor(t=1,e=1){this.width=t,this.height=e,this.create()}getSiteByCoord(t){return this.sites.get(n.CtoID(t))}getRandomSite(){let t=Math.floor(Math.random()*this.height),e=Math.floor(Math.random()*this.width);return this.sites.get(`${t}:${e}`)}create(){this.sites=new Map;for(let t=0;t<this.width;t++)for(let e=0;e<this.height;e++)this.sites.set(`${e}:${t}`,new l({row:e,col:t}))}}(32,32);new p5(t=>{t.preload=(()=>{}),t.setup=(()=>{t.createCanvas(700,700)});t.draw=(()=>{t.background(100),((t,e)=>{t.push(),t.translate(25,25),e.sites.forEach(e=>{switch(e.atom.elem.type){case i.EMPTY.type:t.stroke(0,0,0,0),t.fill(32,32,32,127);break;case i.DREG.type:t.stroke(0,0,0,127),t.fill(255,32,32);break;case i.RES.type:t.stroke(0,0,0,127),t.fill(32,255,64);break;case i.WALL.type:t.stroke(0,0,0,127),t.fill(32,32,255);break;case i.MASON.type:t.stroke(0,0,0,127),t.fill(32,255,255)}t.ellipse(14*e.tilePos.col,14*e.tilePos.row,14,14)}),t.pop()})(t,c),(()=>{for(var t=0;t<1e3;t++){let t=n.GenerateEventWindow(c,c.width,c.height);t.origin.atom.exec(t)}})()}),t.mouseClicked=(()=>{let e=((t,e)=>(t=t-25+7,e=e-25+7,t=Math.floor(t/14),e=Math.floor(e/14),c.getSiteByCoord({row:e,col:t})))(t.mouseX,t.mouseY);e&&(t.keyIsPressed?e.atom=new s(i.MASON):e.atom=new s(i.DREG))})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,