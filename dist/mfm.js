!function(t){var e={};function o(r){if(e[r])return e[r].exports;var s=e[r]={i:r,l:!1,exports:{}};return t[r].call(s.exports,s,s.exports,o),s.l=!0,s.exports}o.m=t,o.c=e,o.d=function(t,e,r){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)o.d(r,s,function(e){return t[e]}.bind(null,s));return r},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=0)}([function(t,e,o){"use strict";o.r(e);class r{constructor(t,e){this.tile=t,this.makeWindow(t,e)}makeWindow(t,e){this.window=new Map,this.origin=this.tile.getSiteByCoord(e),this.window.set(s.CtoID(e),this.origin),r.WINDOW_ORDER_OFFSETS.map(t=>this.OffsetFromOrigin(e,t.row,t.col)).forEach(e=>{t.getSiteByCoord(e)&&this.window.set(s.CtoID(e),t.getSiteByCoord(e))})}OffsetFromOrigin(t,e,o){return{row:t.row+e,col:t.col+o}}getRandom(t){let e;if(0!==(e=t?Array.from(this.window.values()).filter(e=>{if(e.atom&&e.atom.elem.type===t.type)return e}):Array.from(this.window.values())).length)return e[Math.floor(Math.random()*e.length)]}getAdjacent(t){if(t){const e=(t,e)=>{if(t&&t.atom&&t.atom.type==e)return t};let o=this.getWest();if(e(o,t))return o;if(e(o=this.getNorth(),t))return o;if(e(o=this.getSouth(),t))return o;if(e(o=this.getEast(),t))return o;if(e(o=this.getNorthWest(),t))return o;if(e(o=this.getSouthWest(),t))return o;if(e(o=this.getNorthEast(),t))return o;if(e(o=this.getSouthEast(),t))return o}else{if(this.getWest())return this.getWest();if(this.getNorth())return this.getNorth();if(this.getSouth())return this.getSouth();if(this.getEast())return this.getEast();if(this.getNorthWest())return this.getNorthWest();if(this.getSouthWest())return this.getSouthWest();if(this.getNorthEast())return this.getNorthEast();if(this.getSouthEast())return this.getSouthEast()}}getEast(){return this.getDirection(r.EW_EAST)}getWest(){return this.getDirection(r.EW_WEST)}getNorth(){return this.getDirection(r.EW_NORTH)}getSouth(){return this.getDirection(r.EW_SOUTH)}getNorthWest(){return this.getDirection(r.EW_NORTHWEST)}getSouthWest(){return this.getDirection(r.EW_SOUTHWEST)}getNorthEast(){return this.getDirection(r.EW_NORTHEAST)}getSouthEast(){return this.getDirection(r.EW_SOUTHEAST)}getDirection(t){let e=this.tile.sites.get(s.CtoID(this.OffsetFromOrigin(this.origin.tilePos,t.row,t.col)));if(e)return e}}r.WINDOW_ORDER_OFFSETS=[{col:0,row:0},{col:-1,row:0},{col:0,row:-1},{col:0,row:1},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1},{col:-2,row:0},{col:0,row:-1},{col:0,row:2},{col:2,row:0},{col:-2,row:-1},{col:-2,row:1},{col:-1,row:-2},{col:-1,row:2},{col:1,row:-2},{col:1,row:2},{col:2,row:-1},{col:2,row:1},{col:-3,row:0},{col:0,row:-3},{col:0,row:3},{col:3,row:0},{col:-2,row:-2},{col:-2,row:2},{col:2,row:-2},{col:2,row:2},{col:-3,row:-1},{col:-3,row:1},{col:-1,row:-3},{col:-1,row:3},{col:1,row:-3},{col:1,row:3},{col:3,row:-1},{col:3,row:1},{col:-4,row:0},{col:0,row:-4},{col:0,row:4},{col:4,row:0}],r.EW_WEST={col:-1,row:0},r.EW_EAST={col:1,row:0},r.EW_NORTH={col:0,row:-1},r.EW_SOUTH={col:0,row:1},r.EW_NORTHWEST={col:-1,row:-1},r.EW_SOUTHWEST={col:-1,row:1},r.EW_NORTHEAST={col:1,row:-1},r.EW_SOUTHEAST={col:1,row:1};class s{static CtoID(t){return`${t.row}:${t.col}`}static IDtoC(t){let e=t.split(":");return{row:parseInt(e[0]),col:parseInt(e[1])}}static GenerateEventWindow(t,e,o){let s=Math.floor(Math.random()*e),i=Math.floor(Math.random()*o);return new r(t,{row:i,col:s})}}class i{constructor(t,e,o=!0,r=!0,s=0){this.name=t,this.type=e,this.data=s,this.moveable=o,this.killable=r}set data(t){this._data=t}get data(){return this._data}set name(t){this._name=t}get name(){return this._name}set type(t){this._type=t}get type(){return this._type}set moveable(t){this._moveable=t}get moveable(){return this._moveable}set killable(t){this._killable=t}get killable(){return this._killable}exec(t){}}class n extends i{constructor(){super(h.EMPTY.name,h.EMPTY.type)}exec(t){super.exec(t)}}class a extends i{constructor(){super(h.RES.name,h.RES.type)}exec(t){super.exec(t)}}class l extends i{constructor(){super(h.DREG.name,h.DREG.type),this.pTOTAL_CHANCE=100,this.pDREG_CREATE=.1,this.pRES_CREATE=.5,this.pDREG_DESTROY=10,this.pANY_DESTROY=1}exec(t){const e=Math.random()*this.pTOTAL_CHANCE<this.pDREG_CREATE,o=Math.random()*this.pTOTAL_CHANCE<this.pRES_CREATE,r=Math.random()*this.pTOTAL_CHANCE<this.pDREG_DESTROY,s=Math.random()*this.pTOTAL_CHANCE<this.pANY_DESTROY,i=t.getRandom();switch(e?(i.atom.elem=new l,console.log("DREG CREATED",i)):o?i.atom.type===h.EMPTY&&(i.atom.elem=new a,console.log("RES CREATED",i)):r?i.atom.type===h.DREG&&(i.atom.elem=new n,console.log("DREG DESTROYED",i)):s&&(i.atom.elem=new n,console.log("ANY DESTROYED",i)),Math.floor(8*Math.random())){case 0:t.getWest()&&t.origin.swapAtoms(t.getWest());break;case 1:t.getEast()&&t.origin.swapAtoms(t.getEast());break;case 2:t.getNorth()&&t.origin.swapAtoms(t.getNorth());break;case 3:t.getSouth()&&t.origin.swapAtoms(t.getSouth())}Math.random();super.exec(t)}}class h{static registerType(t,e,o){this.TYPES_ARRAY.push({name:t,type:e,class:o})}}h.EMPTY={name:"EMPTY",type:"E",class:n},h.DREG={name:"DREG",type:"D",class:l},h.RES={name:"RES",type:"R",class:a},h.TYPES_ARRAY=[h.EMPTY,h.DREG,h.RES];class c{constructor(t=h.EMPTY){this.type=t,this.elem=new this.type.class}exec(t){this.elem.exec(t)}}class u{constructor(t){this.tilePos=t,this.id=s.CtoID(this.tilePos),this.create()}swapAtoms(t){let e=this.atom;this.atom=t.atom,t.atom=e}create(){this.atom=new c}}let E=new class{constructor(t=1,e=1){this.width=t,this.height=e,this.create()}getSiteByCoord(t){return this.sites.get(s.CtoID(t))}getRandomSite(){let t=Math.floor(Math.random()*this.height),e=Math.floor(Math.random()*this.width);return this.sites.get(`${t}:${e}`)}create(){this.sites=new Map;for(let t=0;t<this.width;t++)for(let e=0;e<this.height;e++)this.sites.set(`${e}:${t}`,new u({row:e,col:t}))}}(30,30);console.log(E),console.log(E.getRandomSite()),E.getRandomSite().atom.elem=new l,E.getRandomSite().atom.elem=new l,E.getRandomSite().atom.elem=new l,E.getRandomSite().atom.elem=new l;new p5(t=>{t.preload=(()=>{}),t.setup=(()=>{t.createCanvas(800,800)});t.draw=(()=>{t.background(100),((t,e)=>{t.push(),t.translate(50,50),e.sites.forEach(e=>{switch(e.atom.elem.type){case h.EMPTY.type:t.fill(32);break;case h.DREG.type:t.fill(255,32,32);break;case h.RES.type:t.fill(32,255,64)}t.stroke(0),t.ellipse(12*e.tilePos.col,12*e.tilePos.row,12,12)}),t.pop()})(t,E),(()=>{for(var t=0;t<1500;t++){let t=s.GenerateEventWindow(E,E.width,E.height);t.origin.atom.exec(t)}})()})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,